enum ENGRAM_BLOCK_TYPE {
	NONE,
	HEADING_1,
	HEADING_2,
	HEADING_3,
	UNORDERED_LIST,
	ORDERED_LIST,
	HORIZONTAL_RULE,
}

enum TOKEN_TYPE {
	NONE,
	HEADING_1_MARKUP,
	HEADING_2_MARKUP,
	HEADING_3_MARKUP,
	UNORDERED_LIST_MARKUP,
	ORDERED_LIST_MARKUP,
	HORIZONTAL_RULE_MARKUP,
	IMAGE_MARKUP_1, IMAGE_MARKUP_2, IMAGE_PATH,
	LEFT_BOLD_TEXT_MARKUP, RIGHT_BOLD_TEXT_MARKUP,
	LEFT_ITALIC_TEXT_MARKUP, RIGHT_ITALIC_TEXT_MARKUP,
	LEFT_UNDERLINED_TEXT_MARKUP, RIGHT_UNDERLINED_TEXT_MARKUP,
	LEFT_HIGHLIGHTED_TEXT_MARKUP, RIGHT_HIGHLIGHTED_TEXT_MARKUP,
	LEFT_STRIKETHROUGH_TEXT_MARKUP, RIGHT_STRIKETHROUGH_TEXT_MARKUP,
	LINK_MARKUP_1, LINK_MARKUP_2, LINK_MARKUP_3, LINK_URL,
	TEXT,
	NEW_BLOCK_TRIGGER, NEW_INDENTED_BLOCK_TRIGGER,
	BLANK_LINE
}

const ENGRAM_REGEX_PATTERNS = {
	NEW_BLOCK_TRIGGER: /(\n\n\t+|\n\n|\n\t+|(?<=\n\t+.*)\n(?!\n|\t)|(?<=\n\n)\n|^\n|\n$)/g,

	TITLE: /(^|.*\n)===/,

	// within blocks and triggers
	HEADING_1_MARKUP: /^=1= /,
	HEADING_2_MARKUP: /^=2= /,
	HEADING_3_MARKUP: /^=3= /,
	UNORDERED_LIST_MARKUP: /^\* /,
	ORDERED_LIST_MARKUP: /^\d+. /,
	HORIZONTAL_RULE_MARKUP: /^--- /,

	// hybrid
	IMAGE: /image:.+?{}/,

	// inline
	BOLD_TEXT: /`@\n?.+\n?@`/,
	ITALIC_TEXT: /`\/\n?.+\n?\/`/,
	UNDERLINED_TEXT: /`_\n?.+\n?_`/,
	HIGHLIGHTED_TEXT: /`=\n?.+\n?=`/,
	STRIKETHROUGH_TEXT: /`-\n?.+\n?-`/,
	LINK: /`_\n?.+\n?_\(.+?\)`/,
};

const FIXED_TOKENS = {
	HEADING_1_MARKUP: {
		name: TOKEN_TYPE.HEADING_1_MARKUP,
		value: '=1= ',
	},
	HEADING_2_MARKUP: {
		name: TOKEN_TYPE.HEADING_2_MARKUP,
		value: '=2= ',
	},
	HEADING_3_MARKUP: {
        name: TOKEN_TYPE.HEADING_3_MARKUP,
		value: '=3= ',
    },
	UNORDERED_LIST_MARKUP: {
		name: TOKEN_TYPE.UNORDERED_LIST_MARKUP,
		value: '* ',
	},
	HORIZONTAL_RULE_MARKUP: {
		name: TOKEN_TYPE.HORIZONTAL_RULE_MARKUP,
		value: '--- ',
	},
	IMAGE_MARKUP_1: {
		name: TOKEN_TYPE.IMAGE_MARKUP_1,
		value: 'image:',
	},
	IMAGE_MARKUP_2: {
		name: TOKEN_TYPE.IMAGE_MARKUP_2,
		value: '{}',
	},
	LEFT_BOLD_TEXT_MARKUP: {
		name: TOKEN_TYPE.LEFT_BOLD_TEXT_MARKUP,
		value: '`@',
	},
	RIGHT_BOLD_TEXT_MARKUP: {
		name: TOKEN_TYPE.RIGHT_BOLD_TEXT_MARKUP,
		value: '@`',
	},
	LEFT_ITALIC_TEXT_MARKUP: {
		name: TOKEN_TYPE.LEFT_ITALIC_TEXT_MARKUP,
		value: '`/',
	},
	RIGHT_ITALIC_TEXT_MARKUP: {
	name: TOKEN_TYPE.RIGHT_ITALIC_TEXT_MARKUP,
	value: '/`',
	},
	LEFT_UNDERLINED_TEXT_MARKUP: {
	name: TOKEN_TYPE.LEFT_UNDERLINED_TEXT_MARKUP,
	value: '`_',
	},
	RIGHT_UNDERLINED_TEXT_MARKUP: {
		name: TOKEN_TYPE.RIGHT_UNDERLINED_TEXT_MARKUP,
		value: '_`',
	},
	LEFT_HIGHLIGHTED_TEXT_MARKUP: {
		name: TOKEN_TYPE.LEFT_HIGHLIGHTED_TEXT_MARKUP,
		value: '`=',
	},
	RIGHT_HIGHLIGHTED_TEXT_MARKUP: {
		name: TOKEN_TYPE.RIGHT_HIGHLIGHTED_TEXT_MARKUP,
		value: '=`',
	},
	LEFT_STRIKETHROUGH_TEXT_MARKUP: {
		name: TOKEN_TYPE.LEFT_STRIKETHROUGH_TEXT_MARKUP,
		value: '`-',
	},
	RIGHT_STRIKETHROUGH_TEXT_MARKUP: {
		name: TOKEN_TYPE.RIGHT_STRIKETHROUGH_TEXT_MARKUP,
		value: '-`',
	},
	LINK_MARKUP_1: {
		name: TOKEN_TYPE.LINK_MARKUP_1,
		value: '`_',
	},
	LINK_MARKUP_2: {
		name: TOKEN_TYPE.LINK_MARKUP_2,
		value: '_(',
	},
	LINK_MARKUP_3: {
		name: TOKEN_TYPE.LINK_MARKUP_3,
		value: ')`',
	},
	BLANK_LINE: {
		name: TOKEN_TYPE.BLANK_LINE,
		value: '',
	},
};

export {
	TOKEN_TYPE, ENGRAM_BLOCK_TYPE, ENGRAM_REGEX_PATTERNS as PATTERNS, FIXED_TOKENS as TOKENS,
};
